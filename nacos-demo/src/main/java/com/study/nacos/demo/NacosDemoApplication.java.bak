package com.study.nacos.demo;

import com.alibaba.cloud.nacos.ribbon.NacosRule;
import com.alibaba.nacos.api.config.annotation.NacosConfigListener;
import com.netflix.loadbalancer.IRule;
import com.study.nacos.demo.feign.GreetingClient;
import com.study.nacos.demo.listener.ConfigChangedEventListener;
import com.study.nacos.loadbalance.rule.MyZoneAvoidanceRule;
import com.study.nacos.loadbalance.rule.fontspecial.FeignRequestTokenInterceptor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.context.refresh.ContextRefresher;
import org.springframework.cloud.endpoint.event.RefreshEventListener;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@EnableFeignClients
@SpringBootApplication
@EnableDiscoveryClient
//@EnableConfigurationProperties(value = UserProperties.class)
@Slf4j
public class NacosDemoApplication implements CommandLineRunner {


    public static void main(String[] args) {
        SpringApplication.run(NacosDemoApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

    }
    @NacosConfigListener(dataId = "greeting-service")
    public void onMessage(String config){
        log.info("...............change config: "+config);
    }


    @Bean
    public ConfigChangedEventListener configChangedEventListener() {
        return new ConfigChangedEventListener();
    }

    //@RefreshScope
    @RestController
    class GreetingApi{
        @Value("${test:}")
        private String test;
        //@Autowired
        //private UserProperties userProperties;
        @Autowired
        private GreetingClient greetingClient;

        @GetMapping("/api/say")
        public String sayHello(){
            return greetingClient.sayHello()+" (by feign)";
        }

        @GetMapping("/showConfiguration")
        public String showConfiguration(){
            log.info("showConfiguration .....test: "+test);
            //log.info("userProperties : {}",userProperties);
            return test;
        }
    }

    //@Bean
    //@ConditionalOnMissingBean
    public IRule ribbonRule() {
        NacosRule nacosRule = new NacosRule();
        return nacosRule;
    }

    //@Bean
    //@ConditionalOnMissingBean
    public IRule myZoneAvoidanceRule(){
        return new MyZoneAvoidanceRule();
    }

    @Bean
    public FeignRequestTokenInterceptor reignWithTokenInterceptor(){
        FeignRequestTokenInterceptor feignWithTokenInterceptor = new FeignRequestTokenInterceptor();
        return feignWithTokenInterceptor;
    }

}
